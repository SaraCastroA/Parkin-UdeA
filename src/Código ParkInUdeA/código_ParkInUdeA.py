# -*- coding: utf-8 -*-
"""Código_Ultimosdetalles.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qk1Pl_VnRqpfDSW_JyuCzKLbxcecDR04
"""

import time
import platform
import getpass
import os
import csv
from datetime import datetime as dt, timedelta
import pytz

zona_horaria = pytz.timezone('America/Bogota')
ESPACIADO = 64

registro_acciones = {
    'Registrar Usuario': 0,
    'Ingresar Vehículo': 0,
    'Retirar Vehículo': 0,
    'Exportar CSV': 0,
}

def registrar_log(accion, instruccion):
    inicio = time.perf_counter()
    time.sleep(0.01)
    fin = time.perf_counter()
    duracion = fin - inicio

    ahora = dt.now(zona_horaria)
    timestamp = ahora.strftime("%Y-%m-%d %H:%M:%S.%f")[:-3]

    usuario = getpass.getuser()
    sistema = platform.system()
    version = platform.version()
    plataforma = platform.platform()

    linea = f"{timestamp}\t{accion}\t{instruccion}\t{duracion:.4f}s\t{usuario}\t{sistema} {version}\t{plataforma}\n"
    with open("log_eventos.txt", "a", encoding="utf-8") as f:
        f.write(linea)

    if accion in registro_acciones:
        registro_acciones[accion] += 1


def fecha_hora():
    ahora = dt.now(zona_horaria)
    anio, mes, dia = ahora.year, ahora.month, ahora.day
    fecha_ymd = f'{anio}-{str(mes).zfill(2)}-{str(dia).zfill(2)}'
    hora = ahora.hour
    minuto = ahora.minute
    fecha_hm = f'{str(hora).zfill(2)}:{str(minuto).zfill(2)}'
    return fecha_ymd, fecha_hm

def imprimir_menu(nombre):
    fecha, hora = fecha_hora()
    print('-'*ESPACIADO)
    print(nombre.center(ESPACIADO))
    print(fecha.center(ESPACIADO))
    print(hora.center(ESPACIADO))
    print('-'*ESPACIADO)
    print('Menú'.ljust(ESPACIADO))
    print('01--> Registrar Usuario')
    print('02--> Ingresar vehículo')
    print('03--> Retirar vehículo')
    print('04--> Administrador')
    print('05--> Salir')
    print('-'*ESPACIADO)

def registro_usuario(dic:dict, documento:str, nombre:str, apellido:str, placa:str, fecha_nacimiento:str):
    if isinstance(dic,dict):
        llaves = list(dic.keys())
        if documento in llaves:
            return False
        else:
            dic[documento] = {
                'Documento':documento,
                'Nombre':nombre,
                'Apellido':apellido,
                'Placa':placa,
                'Fecha de Nacimiento':fecha_nacimiento
                }
            return dic
    else:
        return False

zona_horaria = pytz.timezone('America/Bogota')


def limpiar_consola():
    os.system('cls' if os.name == 'nt' else 'clear')

def validar_datos(documento:str, nombre:str, apellido:str, placa:str, fecha_nacimiento:str)->bool:
    validar = True
    global error
    error = ''

    # Validacion del documento
    if isinstance(documento, str):
        if len(documento) <= 3:
            validar = False
            error += 'Error, El documento es muy corto|\n'
        elif any(char.isalpha() for char in documento):
            validar = False
            error += 'Error, El documento no puede contener letras|\n'
        else:
            pass
    else:
        validar = False
        error += 'Error, El documento no es correcto|\n'

    # Validacion del nombre
    if isinstance(nombre, str):
        if len(nombre) <= 3:
            validar = False
            error += 'Error, El nombre es muy corto|\n'
        elif any(char.isdigit() for char in nombre):
            validar = False
            error += 'Error, El nombre no puede contener números|\n'
        else:
            pass
    else:
        validar = False
        error += 'Error, El nombre no es correcto|\n'

    # Validacion del apellido
    if isinstance(apellido, str):
        if len(apellido) <= 3:
            validar = False
            error += 'Error, El apellido es muy corto|\n'
        elif any(char.isdigit() for char in apellido):
            validar = False
            error += 'Error, El apellido no puede contener números|\n'
        else:
            pass
    else:
        validar = False
        error += 'Error, El usuario no es correcto|\n'

    # Validación de placa
    if isinstance(placa, str):
        if len(placa) != 6:
            validar = False
            error += 'Error, La placa debe tener exactamente 6 caracteres|\n'
        elif not (placa[:3].isalpha() and placa[:3].isupper() and placa[3:].isdigit()):
            validar = False
            error += 'Error, La placa debe tener 3 letras mayúsculas seguidas de 3 números|\n'
    else:
        validar = False
        error += 'Error, La placa no es correcta|\n'

    # Validación de fecha de nacimiento con año bisiesto
    if isinstance(fecha_nacimiento, str):
        partes = fecha_nacimiento.split("-")
        if len(partes) == 3:
            anio_str, mes_str, dia_str = partes
            if (anio_str.isdigit() and mes_str.isdigit() and dia_str.isdigit() and
                len(anio_str) == 4 and len(mes_str) == 2 and len(dia_str) == 2):
                anio = int(anio_str)
                mes = int(mes_str)
                dia = int(dia_str)
                if 1 <= mes <= 12:
                    # Validar año bisiesto para febrero
                    if mes == 2:
                        bisiesto = (anio % 4 == 0 and anio % 100 != 0) or (anio % 400 == 0)
                        dias_febrero = 29 if bisiesto else 28
                        if 1 <= dia <= dias_febrero:
                            pass
                        else:
                            validar = False
                            error += f"Error, día inválido para febrero en el año {anio}\n"
                    else:
                        dias_por_mes = [31, 28, 31, 30, 31, 30,
                                        31, 31, 30, 31, 30, 31]
                        if 1 <= dia <= dias_por_mes[mes - 1]:
                            pass
                        else:
                            validar = False
                            error += "Error, día inválido para ese mes\n"
                else:
                    validar = False
                    error += "Error, mes inválido (debe estar entre 01 y 12)\n"
            else:
                validar = False
                error += "Error, los valores deben ser numéricos con el formato YYYY-MM-DD\n"
        else:
            validar = False
            error += "Error, el formato debe tener 3 partes separadas por guiones\n"
    else:
        validar = False
        error += "Error, la fecha debe ser un texto\n"

    if not validar and error:
        print(error)
    return validar

def exportar_datos_csv(dic_usuarios, vehiculos_parqueados, vehiculos_retirados={}, nombre_archivo_usuarios="usuarios.csv", nombre_archivo_vehiculos="vehiculos.csv"):
    """Exporta los datos de usuarios y vehículos a archivos CSV."""

    # Exportar usuarios
    with open(nombre_archivo_usuarios, 'w', newline='', encoding='utf-8') as archivo_csv_usuarios:
        campos_usuarios = ['Documento', 'Nombre', 'Apellido', 'Placa', 'Fecha de Nacimiento']
        escritor_csv_usuarios = csv.DictWriter(archivo_csv_usuarios, fieldnames=campos_usuarios)

        escritor_csv_usuarios.writeheader()
        for datos_usuario in dic_usuarios.items():
            escritor_csv_usuarios.writerow(datos_usuario)

    print(f"Datos de usuarios exportados a {nombre_archivo_usuarios}")

    # Exportar vehículos - combinando parqueados y retirados
    with open(nombre_archivo_vehiculos, 'w', newline='', encoding='utf-8') as archivo_csv_vehiculos:
        campos_vehiculos = ['Placa', 'Documento', 'Hora de Ingreso', 'Hora de Salida', 'Estado']
        escritor_csv_vehiculos = csv.DictWriter(archivo_csv_vehiculos, fieldnames=campos_vehiculos)

        escritor_csv_vehiculos.writeheader()
        
        # Exportar vehículos parqueados (sin retirar)
        for placa, datos_vehiculo in vehiculos_parqueados.items():
            hora_ingreso = datos_vehiculo['hora_ingreso'].strftime('%Y-%m-%d %H:%M:%S') if isinstance(datos_vehiculo['hora_ingreso'], dt) else ''
            
            escritor_csv_vehiculos.writerow({
                'Placa': placa,
                'Documento': datos_vehiculo['documento'],
                'Hora de Ingreso': hora_ingreso,
                'Hora de Salida': '',
                'Estado': 'Parqueado'
            })
        
        # Exportar vehículos retirados (historial completo)
        for placa, datos_vehiculo in vehiculos_retirados.items():
            hora_ingreso = datos_vehiculo['hora_ingreso'].strftime('%Y-%m-%d %H:%M:%S') if isinstance(datos_vehiculo['hora_ingreso'], dt) else ''
            hora_salida = datos_vehiculo.get('hora_salida', '').strftime('%Y-%m-%d %H:%M:%S') if isinstance(datos_vehiculo.get('hora_salida'), dt) else ''

            escritor_csv_vehiculos.writerow({
                'Placa': placa,
                'Documento': datos_vehiculo['documento'],
                'Hora de Ingreso': hora_ingreso,
                'Hora de Salida': hora_salida,
                'Estado': 'Retirado'
            })

    print(f"Datos de vehículos exportados a {nombre_archivo_vehiculos}")
    print(f"Total registros: {len(vehiculos_parqueados) + len(vehiculos_retirados)}")

dic_usuarios = {}
vehiculos_parqueados = {}
vehiculos_retirados = {}

usuarios_admin = {
    "admin1": "1234",
    "admin2": "4567",
    "admin3": "7890"
}
#Máximo de vehículos permitidos en el parqueadero
max_vehiculos = 64    
def imprimir_escena():
    ESCENA = [
        "        ______                    .--.        \\ | /",
        "       /|_||_\\`.__             .-(    ).      - O - ",
        "      (   _    _ _\\           (___.__)__)     / | \\",
        "      =`-(_)--(_)-' ",
    ]
    for linea in ESCENA:
        print(linea)

def ingresar_vehiculo(dic_usuarios, vehiculos_parqueados, max_vehiculos):
    if len(vehiculos_parqueados) >= max_vehiculos:
        print("Error: El parqueadero está lleno. No se pueden ingresar más vehículos.")
        return vehiculos_parqueados

    documento = input('Ingrese el documento del usuario: ')
    placa = input('Ingrese la placa del vehículo: ').upper()

    if documento not in dic_usuarios:
        print("Error: Usuario no encontrado en el sistema. Por favor, regístrese primero.")
        return vehiculos_parqueados

    if placa in vehiculos_parqueados:
        print("Error: Este vehículo ya está parqueado.")
        return vehiculos_parqueados

    hora_ingreso = dt.now(zona_horaria)
    vehiculos_parqueados[placa] = {
        "documento": documento,
        "hora_ingreso": hora_ingreso
    }

    print('-'*40)
    print("Aparcadero ParkIn UdeA".center(40))
    print('-'*40)
    print("Vehículo ingresado con éxito.". center(40))
    print("Recibo de Ingreso".center(40))
    print(f"{'Usuario: ':<20} {dic_usuarios[documento]['Nombre']:>10} {dic_usuarios[documento]['Apellido']}")
    print(f"{'Placa: ':<20}{placa:>20}")
    print(f"{'Hora de Ingreso: ':<20}{hora_ingreso.strftime('%Y-%m-%d %H:%M:%S'):>20}")
    print('-'*40)
    print('Gracias por usar parkIn UdeA'.center(40))

    for i in range(3):
        print('Guardando datos' + '.' * (i + 1), end='\r')
        time.sleep(0.5)
    print('Datos Guardados...   '.center(40))

    # Aquí se registra el evento en el log
    registrar_log("Ingresar Vehículo", f"Placa: {placa}, Documento: {documento}")

    return vehiculos_parqueados

def retirar_vehiculo(dic_usuarios, vehiculos_parqueados, vehiculos_retirados):
    documento = input('Ingrese el documento del usuario: ')
    placa = input('Ingrese la placa del vehículo: ').upper()

    if placa not in vehiculos_parqueados:
        print("Error: Este vehículo no está registrado como parqueado.")
        return

    if documento != vehiculos_parqueados[placa]["documento"]:
        print("Error: El documento no coincide con el usuario del vehículo.")
        return


    hora_salida = dt.now(zona_horaria)
    hora_ingreso = vehiculos_parqueados[placa]["hora_ingreso"]
    tiempo_total = hora_salida - hora_ingreso
    tiempo_segundos = tiempo_total.total_seconds()

    horas_completas = int(tiempo_segundos // 3600)
    segundos_restantes = tiempo_segundos % 3600
    cuartos_hora = int((segundos_restantes + 899) // 900)

    cobro_horas = horas_completas * 7000
    cobro_cuartos = cuartos_hora * 1500
    total_pagar = cobro_horas + cobro_cuartos

    if total_pagar < 7000:
        total_pagar = 7000

    # Descuento por cumpleaños
    fecha_nac = dic_usuarios[documento]["Fecha de Nacimiento"]
    partes = fecha_nac.split("-")
    hoy = dt.now()
    if len(partes) == 3:
        if int(partes[1]) == hoy.month and int(partes[2]) == hoy.day:
            descuento = int(total_pagar * 0.10)
            total_pagar -= descuento
            print("🎉 ¡Feliz cumpleaños! Se aplicó un 10% de descuento.")


    minutos_totales = int(tiempo_segundos // 60)
    # Mostrar factura
    print('-'*40)
    print("Factura de Retiro".center(40))
    print('-'*40)
    print(f"{'Usuario:':<20}{dic_usuarios[documento]['Nombre']:>10} {dic_usuarios[documento]['Apellido']}")
    print(f"{'Placa:':<20}{placa:>20}")
    print(f"{'Hora Ingreso:':<20}{hora_ingreso.strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"{'Hora Salida:':<20}{hora_salida.strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"{'Total tiempo (min):':<20}{minutos_totales}")
    print(f"{'Total a pagar:':<20}${total_pagar}")
    print('-'*40)
    print("Gracias por usar ParkIn UdeA".center(40))

    for i in range(3):
        print('Guardando datos' + '.' * (i + 1), end='\r')
        time.sleep(0.5)
    print('Datos Guardados...   '.center(40))

    # Aquí se guarda el historial
    vehiculo_info = vehiculos_parqueados[placa].copy()
    vehiculo_info["hora_salida"] = hora_salida
    vehiculos_retirados[placa] = vehiculo_info

    # Eliminar del diccionario
    del vehiculos_parqueados[placa]

    # Aquí se registra el evento en el log
    registrar_log("Retirar Vehículo", f"Placa: {placa}, Documento:{documento}")

def modulo_administrador(dic_usuarios, vehiculos_parqueados, vehiculos_retirados, usuarios_admin):
    usuario = input("Ingrese el usuario administrador: ")
    contrasenia = input("Ingrese la contraseña administrador: ")
    if usuario in usuarios_admin and contrasenia == usuarios_admin[usuario]:
        while True:
            print("-"*40)
            print("Bienvenido".center(40))
            print("Módulo de Administración".center(40))
            print("-"*40)
            print("1. Total de vehículos registrados")
            print("2. Total de vehículos retirados")
            print("3. Total de vehículos sin retirar")
            print("4. Total pago de vehículos retirados")
            print("5. Tiempo promedio de estancia por vehículo")
            print("6. Lista de usuarios")
            print("7. Vehículo con tiempo de parqueo máximo y mínimo")
            print("8. Eliminar usuario (Requiere confirmación)")
            print("9. Exportar a archivos CSV")
            print("10. Salir del módulo de administración")
            print("-"*40)

            opcion = input("Seleccione una opción: ")

            if opcion == "1":
                total_registrados = len(vehiculos_parqueados) + len(vehiculos_retirados)
                print(f"Total de vehículos registrados: {total_registrados}")

            elif opcion == "2":
                print(f"Total de vehículos retirados: {len(vehiculos_retirados)}")

            elif opcion == "3":
                print(f"Total de vehículos sin retirar: {len(vehiculos_parqueados)}")

            elif opcion == "4":
                total_pagado = 0

                for placa, datos_vehiculo in vehiculos_retirados.items():
                    hora_ingreso = datos_vehiculo["hora_ingreso"]
                    hora_salida = datos_vehiculo["hora_salida"]
                    tiempo_parqueo = hora_salida - hora_ingreso
                    tiempo_segundos = tiempo_parqueo.total_seconds()

                    horas_completas = int(tiempo_segundos // 3600)
                    segundos_restantes = tiempo_segundos % 3600
                    cuartos_hora = int((segundos_restantes + 899) // 900)

                    cobro_horas = horas_completas * 7000
                    cobro_cuartos = cuartos_hora * 1500
                    total_pagar = cobro_horas + cobro_cuartos
                    if total_pagar < 7000:
                        total_pagar = 7000

                    documento = datos_vehiculo["documento"]

                    # Verificación y descuento por cumpleaños
                    if documento in dic_usuarios and "Fecha de Nacimiento" in dic_usuarios[documento]:
                        fecha_nac = dic_usuarios[documento]["Fecha de Nacimiento"]
                        partes = fecha_nac.split("-")
                        hoy = dt.now(zona_horaria)

                        if len(partes) == 3 and all(parte.isdigit() for parte in partes):
                            anio, mes, dia = map(int, partes)
                            es_fecha_valida = False

                            # Validar formato correcto
                            if 1 <= mes <= 12:
                                if mes in [1, 3, 5, 7, 8, 10, 12] and 1 <= dia <= 31:
                                    es_fecha_valida = True
                                elif mes in [4, 6, 9, 11] and 1 <= dia <= 30:
                                    es_fecha_valida = True
                                elif mes == 2:
                                    bisiesto = (anio % 4 == 0 and anio % 100 != 0) or (anio % 400 == 0)
                                    if (bisiesto and 1 <= dia <= 29) or (not bisiesto and 1 <= dia <= 28):
                                        es_fecha_valida = True

                            if es_fecha_valida and mes == hoy.month and dia == hoy.day:
                                descuento = int(total_pagar * 0.10)
                                total_pagar -= descuento

                    total_pagado += total_pagar

                print(f"Total pagado por vehículos retirados: ${total_pagado:.2f}")

            elif opcion == "5":
                if not vehiculos_retirados:
                    print("No hay vehículos retirados registrados.")
                else:
                    total_tiempo = timedelta()
                    vehiculos_retirados_count = 0

                    for datos_vehiculo in vehiculos_retirados.values():
                        if "hora_salida" in datos_vehiculo and datos_vehiculo["hora_salida"] is not None:
                            tiempo_parqueo = datos_vehiculo["hora_salida"] - datos_vehiculo["hora_ingreso"]
                            total_tiempo += tiempo_parqueo
                            vehiculos_retirados_count += 1

                    if vehiculos_retirados_count > 0:
                        tiempo_promedio = total_tiempo / vehiculos_retirados_count
                        print(f"Tiempo promedio de estancia: {tiempo_promedio}")
                    else:
                        print("No hay vehículos con salida registrada para calcular promedio.")

            elif opcion == "6":
                print("-"*40)
                print("Lista de Usuarios".center(40))
                print("-"*40)
                for documento, datos_usuario in dic_usuarios.items():
                    print(f"Documento: {documento}")
                    print(f"Nombre: {datos_usuario['Nombre']} {datos_usuario['Apellido']}")
                    print(f"Placa: {datos_usuario['Placa']}")
                    print(f"Fecha de Nacimiento: {datos_usuario['Fecha de Nacimiento']}")
                    print('-'*40)

            elif opcion == "7":
                if not vehiculos_retirados:
                    print("No hay vehículos retirados registrados.")
                else:
                    vehiculo_max_tiempo = None
                    vehiculo_min_tiempo = None
                    max_tiempo = timedelta()
                    min_tiempo = timedelta(days=9999)

                    for placa, datos_vehiculo in vehiculos_retirados.items():
                        if "hora_salida" in datos_vehiculo and datos_vehiculo["hora_salida"] is not None:
                            tiempo_parqueo = datos_vehiculo["hora_salida"] - datos_vehiculo["hora_ingreso"]

                            if tiempo_parqueo > max_tiempo:
                                max_tiempo = tiempo_parqueo
                                vehiculo_max_tiempo = placa

                            if tiempo_parqueo < min_tiempo:
                                min_tiempo = tiempo_parqueo
                                vehiculo_min_tiempo = placa

                    if vehiculo_max_tiempo:
                        print(f"Vehículo con tiempo máximo de parqueo ({max_tiempo}): {vehiculo_max_tiempo}")
                    else:
                        print("No hay vehículos retirados para calcular el tiempo máximo.")

                    if vehiculo_min_tiempo:
                        print(f"Vehículo con tiempo mínimo de parqueo ({min_tiempo}): {vehiculo_min_tiempo}")
                    else:
                        print("No hay vehículos retirados para calcular el tiempo mínimo.")

            elif opcion == "8":
                documento_eliminar = input("Ingrese el documento del usuario a eliminar: ")

                if documento_eliminar not in dic_usuarios:
                    print("Error: Usuario no encontrado en el sistema.")
                else:
                    print(f"¿Está seguro de que desea eliminar al usuario con documento {documento_eliminar}? (si/no)")
                    confirmacion = input().lower()

                    if confirmacion == "si":
                        total_pagado_usuario = 0
                        interacciones_usuario = 0

                        # Obtener información del usuario antes de eliminarlo
                        datos_usuario = dic_usuarios[documento_eliminar]
                        nombre_usuario = f"{datos_usuario['Nombre']} {datos_usuario['Apellido']}"
                        placa_usuario = datos_usuario.get("Placa", None)

                        # Buscar y calcular totales de vehículos RETIRADOS (historial)
                        vehiculos_usuario_retirados = []


                        for placa, datos_vehiculo in vehiculos_retirados.items():
                            if datos_vehiculo["documento"] == documento_eliminar:
                                vehiculos_usuario_retirados.append(placa)
                                # Calcular pago del vehículo
                                hora_ingreso = datos_vehiculo["hora_ingreso"]
                                hora_salida = datos_vehiculo["hora_salida"]
                                tiempo_parqueo = hora_salida - hora_ingreso
                                tiempo_segundos = tiempo_parqueo.total_seconds()

                                horas_completas = int(tiempo_segundos // 3600)
                                segundos_restantes = tiempo_segundos % 3600
                                cuartos_hora = int((segundos_restantes + 899) // 900)

                                cobro_horas = horas_completas * 7000
                                cobro_cuartos = cuartos_hora * 1500
                                total_pagar = cobro_horas + cobro_cuartos

                                if total_pagar < 7000:
                                    total_pagar = 7000

                                # Verificación de cumpleaños
                                fecha_nac_str = datos_usuario["Fecha de Nacimiento"]
                                partes = fecha_nac_str.split("-")
                                fecha_retiro = hora_salida  # Usar fecha de retiro, no fecha actual

                                if len(partes) == 3 and all(parte.isdigit() for parte in partes):
                                    anio, mes, dia = map(int, partes)
                                    if 1 <= mes <= 12 and 1 <= dia <= 31:
                                        if mes == fecha_retiro.month and dia == fecha_retiro.day:
                                            descuento = int(total_pagar * 0.10)
                                            total_pagar -= descuento

                                total_pagado_usuario += total_pagar
                                interacciones_usuario += 1

                        # Buscar vehículos PARQUEADOS del usuario (sin retirar)
                        vehiculos_usuario_parqueados = []
                        for placa, datos_vehiculo in list(vehiculos_parqueados.items()):
                            if datos_vehiculo["documento"] == documento_eliminar:
                                vehiculos_usuario_parqueados.append(placa)

                        # Mostrar resumen ANTES de eliminar
                        print("-"*50)
                        print(f"RESUMEN DE ELIMINACIÓN - {nombre_usuario}")
                        print("-"*50)
                        print(f"Documento: {documento_eliminar}")
                        print(f"Placa registrada: {placa_usuario}")
                        print(f"Vehículos retirados (historial): {len(vehiculos_usuario_retirados)}")
                        print(f"Vehículos actualmente parqueados: {len(vehiculos_usuario_parqueados)}")
                        print(f"Total pagado por el usuario: ${total_pagado_usuario:.2f}")
                        print(f"Número de interacciones (retiros): {interacciones_usuario}")
                        print("-"*50)

                        # Eliminar vehículos retirados del historial
                        for placa in vehiculos_usuario_retirados:
                            del vehiculos_retirados[placa]

                        # Eliminar vehículos parqueados
                        for placa in vehiculos_usuario_parqueados:
                            del vehiculos_parqueados[placa]

                        # Eliminar el usuario del sistema
                        del dic_usuarios[documento_eliminar]

                        print("Usuario eliminado con éxito.")
                        print("Se ha eliminado todo el historial asociado al usuario.")
                    else:
                        print("Eliminación cancelada.")


            elif opcion == "9":
                exportar_datos_csv(dic_usuarios, vehiculos_parqueados, vehiculos_retirados) #Llama la función para exportar los datos
                print("Datos exportados a archivos CSV.")

                # Registrar en el log
                registrar_log("Exportar CSV", "Exportar usuarios y vehículos a CSV")

            elif opcion == "10":
                print("Saliendo del módulo de administración.")
                break

            else:
                print("Opción no válida. Intente de nuevo.")
    else:
        print("Usuario o contraseña incorrectos.")

while True:
    limpiar_consola()
    imprimir_escena()
    imprimir_menu('Bienvenido al aparcadero ParkIn UdeA')
    opcion = input('Ingresar opción --> ')
    match opcion:
        case '1': # Registrar Usuario
            documento = input('Ingresar documento'.ljust(22)+'--> ')
            nombre = input('Ingresar nombre'.ljust(22)+'--> ')
            apellido = input('Ingresar apellido'.ljust(22)+'--> ')
            placa = input('Ingresar placa'.ljust(22)+'--> ').upper()
            fecha_nacimiento = input('Ingresar fecha de nacimiento (YYYY-MM-DD)'.ljust(22)+'-->')

            if validar_datos(documento, nombre, apellido, placa, fecha_nacimiento):
                print('Validación Correcta')

                temp = registro_usuario(dic_usuarios, documento, nombre, apellido, placa, fecha_nacimiento)
                if temp:
                    dic_usuarios = temp

                    for i in range(3):
                        print('Guardando datos' + '.' * (i + 1), end='\r')
                        time.sleep(0.5)
                    print('Datos Guardados...   ')
                    print(dic_usuarios)
                    print('Usuario registrado con éxito')
                    print('-'*ESPACIADO)

                    # Aquí se registra el evento en el log
                    registrar_log("Registrar Usuario", f"Documento: {documento}, Nombre: {nombre}, Placa: {placa}")

                else:
                    print('Error de almacenamiento, vuelve a intentarlo')
                    continue
            else:
                print('Favor corregir los datos, vuelve y registra los datos.')
                continue

        case '2': # Ingresar vehículo
            vehiculos_parqueados = ingresar_vehiculo(dic_usuarios, vehiculos_parqueados, max_vehiculos)

        case '3': # Retirar vehículo
            retirar_vehiculo(dic_usuarios, vehiculos_parqueados, vehiculos_retirados)

        case '4': # Administrador
            modulo_administrador(dic_usuarios, vehiculos_parqueados, vehiculos_retirados, usuarios_admin)

        case '5': # Salir
            print('Gracias, vuelva pronto')
            # Escribir resumen final en el archivo de log
            with open("log_eventos.txt", "a", encoding="utf-8") as f:
                f.write("\nResumen de acciones realizadas:\n")
                for accion, cantidad in registro_acciones.items():
                    f.write(f"{accion}: {cantidad}\n")   
            break
        case _:
            print('Opción Incorrecta. Favor revisar, vuelve a intentarlo.')
            continue